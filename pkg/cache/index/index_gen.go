/*
 * Copyright 2018 The Trickster Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package index

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
	"github.com/trickstercache/trickster/v2/pkg/util/atomicx"
)

// DecodeMsg implements msgp.Decodable
func (z *Index) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "cache_size":
			z.CacheSize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CacheSize")
				return
			}
		case "object_count":
			z.ObjectCount, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ObjectCount")
				return
			}
		case "objects":
			err = z.Objects.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Index) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "cache_size"
	err = en.Append(0x83, 0xaa, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CacheSize)
	if err != nil {
		err = msgp.WrapError(err, "CacheSize")
		return
	}
	// write "object_count"
	err = en.Append(0xac, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ObjectCount)
	if err != nil {
		err = msgp.WrapError(err, "ObjectCount")
		return
	}
	// write "objects"
	err = en.Append(0xa7, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73)
	if err != nil {
		return
	}
	err = z.Objects.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Index) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "cache_size"
	o = append(o, 0x83, 0xaa, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.CacheSize)
	// string "object_count"
	o = append(o, 0xac, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.ObjectCount)
	// string "objects"
	o = append(o, 0xa7, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73)
	o, err = z.Objects.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Index) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "cache_size":
			z.CacheSize, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheSize")
				return
			}
		case "object_count":
			z.ObjectCount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjectCount")
				return
			}
		case "objects":
			bts, err = z.Objects.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Index) Msgsize() (s int) {
	s = 1 + 11 + msgp.Int64Size + 13 + msgp.Int64Size + 8 + z.Objects.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IndexObjects) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(IndexObjects, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	var field []byte
	_ = field
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *Object
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(Object)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z IndexObjects) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z IndexObjects) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexObjects) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(IndexObjects, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	var field []byte
	_ = field
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *Object
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(Object)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z IndexObjects) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Object) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "expiration":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Expiration")
					return
				}
				z.Expiration = nil
			} else {
				if z.Expiration == nil {
					z.Expiration = new(atomicx.Time)
				}
				err = z.Expiration.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Expiration")
					return
				}
			}
		case "lastwrite":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "LastWrite")
					return
				}
				z.LastWrite = nil
			} else {
				if z.LastWrite == nil {
					z.LastWrite = new(atomicx.Time)
				}
				err = z.LastWrite.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "LastWrite")
					return
				}
			}
		case "lastaccess":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "LastAccess")
					return
				}
				z.LastAccess = nil
			} else {
				if z.LastAccess == nil {
					z.LastAccess = new(atomicx.Time)
				}
				err = z.LastAccess.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "LastAccess")
					return
				}
			}
		case "size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "value":
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Object) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	_ = zb0001Mask
	if z.Value == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "key"
		err = en.Append(0xa3, 0x6b, 0x65, 0x79)
		if err != nil {
			return
		}
		err = en.WriteString(z.Key)
		if err != nil {
			err = msgp.WrapError(err, "Key")
			return
		}
		// write "expiration"
		err = en.Append(0xaa, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		if z.Expiration == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Expiration.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Expiration")
				return
			}
		}
		// write "lastwrite"
		err = en.Append(0xa9, 0x6c, 0x61, 0x73, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65)
		if err != nil {
			return
		}
		if z.LastWrite == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.LastWrite.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "LastWrite")
				return
			}
		}
		// write "lastaccess"
		err = en.Append(0xaa, 0x6c, 0x61, 0x73, 0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73)
		if err != nil {
			return
		}
		if z.LastAccess == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.LastAccess.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "LastAccess")
				return
			}
		}
		// write "size"
		err = en.Append(0xa4, 0x73, 0x69, 0x7a, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Size)
		if err != nil {
			err = msgp.WrapError(err, "Size")
			return
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// write "value"
			err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Object) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	_ = zb0001Mask
	if z.Value == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "key"
		o = append(o, 0xa3, 0x6b, 0x65, 0x79)
		o = msgp.AppendString(o, z.Key)
		// string "expiration"
		o = append(o, 0xaa, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
		if z.Expiration == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Expiration.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Expiration")
				return
			}
		}
		// string "lastwrite"
		o = append(o, 0xa9, 0x6c, 0x61, 0x73, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65)
		if z.LastWrite == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.LastWrite.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "LastWrite")
				return
			}
		}
		// string "lastaccess"
		o = append(o, 0xaa, 0x6c, 0x61, 0x73, 0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73)
		if z.LastAccess == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.LastAccess.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "LastAccess")
				return
			}
		}
		// string "size"
		o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
		o = msgp.AppendInt64(o, z.Size)
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "value"
			o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
			o = msgp.AppendBytes(o, z.Value)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Object) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "expiration":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Expiration = nil
			} else {
				if z.Expiration == nil {
					z.Expiration = new(atomicx.Time)
				}
				bts, err = z.Expiration.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Expiration")
					return
				}
			}
		case "lastwrite":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.LastWrite = nil
			} else {
				if z.LastWrite == nil {
					z.LastWrite = new(atomicx.Time)
				}
				bts, err = z.LastWrite.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastWrite")
					return
				}
			}
		case "lastaccess":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.LastAccess = nil
			} else {
				if z.LastAccess == nil {
					z.LastAccess = new(atomicx.Time)
				}
				bts, err = z.LastAccess.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastAccess")
					return
				}
			}
		case "size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "value":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Object) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Key) + 11
	if z.Expiration == nil {
		s += msgp.NilSize
	} else {
		s += z.Expiration.Msgsize()
	}
	s += 10
	if z.LastWrite == nil {
		s += msgp.NilSize
	} else {
		s += z.LastWrite.Msgsize()
	}
	s += 11
	if z.LastAccess == nil {
		s += msgp.NilSize
	} else {
		s += z.LastAccess.Msgsize()
	}
	s += 5 + msgp.Int64Size + 6 + msgp.BytesPrefixSize + len(z.Value)
	return
}
